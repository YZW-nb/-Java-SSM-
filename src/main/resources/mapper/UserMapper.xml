<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.mapper.UserMapper">
    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" parameterType="String" resultType="com.java.pojo.User">
        SELECT * FROM user WHERE username = #{username}
    </select>
    <!-- 2. 根据学号查询用户（注册时校验学号唯一性） -->
    <select id="selectByStudentId" parameterType="String" resultType="com.java.pojo.User">
        SELECT * FROM user WHERE student_id = #{studentId}
    </select>

    <!-- 3. 插入新用户（包含学号字段） -->
    <insert id="insert" parameterType="com.java.pojo.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
        username,
        password,
        name,
        role,
        create_time,
        student_id  <!-- 新增：学号字段 -->
        ) VALUES (
        #{username},
        #{password},
        #{name},
        #{role},
        CURRENT_TIMESTAMP,  <!-- 自动生成创建时间 -->
        #{studentId}  <!-- 新增：绑定学号参数 -->
        )
    </insert>

    <!--    检查是否为管理员（新增）-->
    <select id="countUserRoleInClub" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM user_club_role
        WHERE user_id = #{userId}
          AND club_id = #{clubId}
          AND role_id = #{roleId}
    </select>

    <select id="getUserById" parameterType="java.lang.Integer" resultType="com.java.pojo.User">
        SELECT * FROM user WHERE id = #{userId}
    </select>
<!--    根据用户ID查询用户（关键方法）-->
    <select id="selectById" parameterType="java.lang.Integer" resultType="com.java.pojo.User">
        SELECT * FROM user WHERE id = #{id}
    </select>
    <!-- 查询所有普通学生 -->
    <select id="selectAllStudents" resultType="com.java.pojo.User">
        SELECT * FROM user WHERE role = 1
    </select>

    <!-- 根据ID更新用户信息 -->
    <update id="update" parameterType="com.java.pojo.User">
        UPDATE user
        SET username = #{username},
            password = #{password},
            name = #{name},
            role = #{role},
            student_id = #{studentId}
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id = #{id}
    </delete>
</mapper>